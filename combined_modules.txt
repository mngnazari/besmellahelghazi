

==================================================
# فایل: database.py
==================================================


import sqlite3
from datetime import datetime, timedelta
import secrets
import string

# آی دی ادمین اصلی
ADMIN_ID = 2138687434


# ----------------------
# توابع کمکی
# ----------------------
def generate_referral_code(length=8):
    """تولید کد رفرال تصادفی"""
    chars = string.ascii_uppercase + string.digits
    return ''.join(secrets.choice(chars) for _ in range(length))


# ----------------------
# ایجاد جداول
# ----------------------
def create_tables():
    conn = sqlite3.connect('print3d.db')
    c = conn.cursor()

    c.execute('''CREATE TABLE IF NOT EXISTS files
                 (
                     id INTEGER PRIMARY KEY AUTOINCREMENT,
                     user_id INTEGER,
                     file_name TEXT,
                     mime_type TEXT,
                     file_id TEXT UNIQUE,
                     file_unique_id TEXT,
                     created_at TEXT,
                     quantity INTEGER,
                     description TEXT,
                     status TEXT DEFAULT 'در حال انجام',
                     notes TEXT
                 )''')  # حذف کامنت فارسی از داخل دستور SQL



    # جدول کاربران
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (
                     id INTEGER PRIMARY KEY,
                     full_name TEXT,
                     phone TEXT UNIQUE,
                     inviter_id INTEGER,
                     remaining_invites INTEGER DEFAULT 5,
                     created_at TEXT,
                     updated_at TEXT
                 )''')

    # جدول رفرال‌ها
    c.execute('''CREATE TABLE IF NOT EXISTS referrals
                 (
                     id INTEGER PRIMARY KEY AUTOINCREMENT,
                     referrer_id INTEGER,
                     referral_code TEXT UNIQUE,
                     used_by INTEGER DEFAULT NULL,
                     created_at TEXT,
                     expires_at TEXT,
                     is_admin BOOLEAN DEFAULT FALSE,
                     FOREIGN KEY(referrer_id) REFERENCES users(id)
                 )''')

    # جدول مدعوین
    c.execute('''CREATE TABLE IF NOT EXISTS invited_users
                 (
                     referrer_id INTEGER,
                     invited_user_id INTEGER PRIMARY KEY,
                     invited_full_name TEXT,
                     invited_phone TEXT,
                     invited_at TEXT,
                     FOREIGN KEY(referrer_id) REFERENCES users(id),
                     FOREIGN KEY(invited_user_id) REFERENCES users(id)
                 )''')

    # جدول کیف پول
    c.execute('''CREATE TABLE IF NOT EXISTS wallets
                 (
                     user_id INTEGER PRIMARY KEY,
                     balance REAL DEFAULT 0,
                     discount REAL DEFAULT 0,
                     FOREIGN KEY(user_id) REFERENCES users(id)
                 )''')

    conn.commit()
    conn.close()


# ----------------------
# توابع کاربران
# ----------------------
def add_user(user_data):
    """اضافه کردن کاربر جدید"""
    try:
        conn = sqlite3.connect('print3d.db')
        c = conn.cursor()
        c.execute('''INSERT INTO users 
                     (id, full_name, phone, inviter_id, created_at, updated_at)
                     VALUES (?, ?, ?, ?, ?, ?)''', user_data)
        # ایجاد رکورد کیف پول
        c.execute('''INSERT INTO wallets (user_id) VALUES (?)''', (user_data[0],))
        conn.commit()
        return True
    except sqlite3.IntegrityError as e:
        print(f"Error adding user: {str(e)}")
        return False
    finally:
        conn.close()


# ----------------------
# توابع رفرال
# ----------------------
def create_referral(user_id, is_admin=False):  # پارامتر is_admin اضافه شد
    try:
        conn = sqlite3.connect('print3d.db')
        c = conn.cursor()

        # اگر کاربر ادمین است محدودیت ندارد
        if not is_admin:
            c.execute("SELECT remaining_invites FROM users WHERE id = ?", (user_id,))
            remaining = c.fetchone()[0]
            if remaining <= 0:
                return None, "ظرفیت دعوت شما تکمیل شده است"

        # تولید کد
        code = generate_referral_code()

        # تنظیم انقضا
        expires = (datetime.now() + timedelta(days=365)).strftime("%Y-%m-%d %H:%M:%S")

        c.execute('''INSERT INTO referrals 
                     (referrer_id, referral_code, created_at, expires_at, is_admin)
                     VALUES (?, ?, ?, ?, ?)''',
                  (user_id, code, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), expires, is_admin))

        conn.commit()
        return code, None
    except Exception as e:
        print(f"Error: {str(e)}")
        return None, "خطای سیستمی"


def validate_referral(code):
    try:
        conn = sqlite3.connect('print3d.db')
        c = conn.cursor()

        c.execute('''SELECT referrer_id, expires_at, used_by, is_admin 
                     FROM referrals 
                     WHERE referral_code = ?''', (code,))
        result = c.fetchone()

        if not result:
            return False, "کد نامعتبر"

        referrer_id, expires_at, used_by, is_admin = result

        if used_by:
            return False, "کد قبلاً استفاده شده"

        if datetime.now() > datetime.strptime(expires_at, "%Y-%m-%d %H:%M:%S"):
            return False, "کد منقضی شده"

        if not is_admin:
            c.execute("SELECT remaining_invites FROM users WHERE id = ?", (referrer_id,))
            remaining = c.fetchone()[0]
            if remaining <= 0:
                return False, "ظرفیت دعوت تکمیل شده است"

        return True, referrer_id
    except Exception as e:
        print(f"Error validating referral: {str(e)}")
        return False, "خطای سیستمی"
    finally:
        conn.close()


def mark_referral_used(code, used_by):
    """علامت‌گذاری کد استفاده شده"""
    conn = sqlite3.connect('print3d.db')
    c = conn.cursor()
    c.execute("UPDATE referrals SET used_by = ? WHERE referral_code = ?", (used_by, code))
    conn.commit()
    conn.close()


# ----------------------
# توابع مدعوین
# ----------------------
def add_invited_user(referrer_id, user_data):
    """ذخیره اطلاعات مدعو"""
    try:
        conn = sqlite3.connect('print3d.db')
        c = conn.cursor()
        c.execute('''INSERT INTO invited_users 
                     (referrer_id, invited_user_id, invited_full_name, invited_phone, invited_at)
                     VALUES (?, ?, ?, ?, ?)''',
                  (referrer_id, *user_data))
        conn.commit()
        return True
    except Exception as e:
        print(f"Error adding invited user: {str(e)}")
        return False
    finally:
        conn.close()


def get_invited_users(referrer_id):
    """دریافت لیست مدعوین"""
    conn = sqlite3.connect('print3d.db')
    c = conn.cursor()
    c.execute('''SELECT invited_full_name, invited_phone, invited_at 
                 FROM invited_users 
                 WHERE referrer_id = ?''', (referrer_id,))
    return c.fetchall()

def decrement_invites(user_id):
    conn = sqlite3.connect('print3d.db')
    c = conn.cursor()
    c.execute("UPDATE users SET remaining_invites = remaining_invites - 1 WHERE id = ?", (user_id,))
    conn.commit()
    conn.close()

def get_user(user_id):
    """دریافت اطلاعات کاربر بر اساس شناسه"""
    conn = sqlite3.connect('print3d.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result

def get_active_orders(user_id):
    """دریافت سفارشات فعال کاربر"""
    conn = sqlite3.connect('print3d.db')
    c = conn.cursor()
    c.execute("""
        SELECT * FROM files 
        WHERE user_id = ? 
        AND status = 'در حال انجام'
        ORDER BY created_at DESC
    """, (user_id,))
    results = c.fetchall()
    conn.close()
    return results

def get_active_orders_count(user_id):
    """دریافت تعداد سفارشات فعال"""
    conn = sqlite3.connect('print3d.db')
    c = conn.cursor()
    c.execute("""
        SELECT COUNT(*) FROM files 
        WHERE user_id = ? 
        AND status = 'در حال انجام'
    """, (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else 0


def add_file(file_data):
    """ذخیره اطلاعات فایل در دیتابیس"""
    try:
        conn = sqlite3.connect('print3d.db')
        c = conn.cursor()

        c.execute('''INSERT INTO files 
                    (user_id, file_name, mime_type, file_id, file_unique_id, 
                     created_at, quantity, description, status, notes)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                  file_data)
        conn.commit()
        return True
    except sqlite3.IntegrityError as e:
        print(f"خطای یکتایی: {str(e)}")
        return False
    except Exception as e:
        print(f"خطای عمومی در افزودن فایل: {str(e)}")
        return False
    finally:
        conn.close()

def get_files_by_user(user_id, days=None):
    conn = sqlite3.connect('print3d.db')
    c = conn.cursor()

    query = "SELECT * FROM files WHERE user_id = ?"
    params = [user_id]

    if days:
        date_filter = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
        query += " AND created_at >= ?"
        params.append(date_filter)

    c.execute(query, params)
    results = c.fetchall()
    conn.close()
    return results


def update_file_description(file_id, description):
    conn = sqlite3.connect('print3d.db')
    c = conn.cursor()
    try:
        c.execute("UPDATE files SET description = ? WHERE file_id = ?",
                 (description, file_id))
        conn.commit()
        return True
    except Exception as e:
        print(f"خطا در آپدیت توضیحات: {str(e)}")
        return False
    finally:
        conn.close()

def get_file_quantity(file_id):
    conn = sqlite3.connect('print3d.db')
    c = conn.cursor()
    c.execute("SELECT quantity FROM files WHERE file_id = ?", (file_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else 1

def update_file_quantity(file_id, new_qty):
    print(f"Updated quantity for file {file_id} to {new_qty}")
    try:
        conn = sqlite3.connect('print3d.db')
        c = conn.cursor()
        c.execute("UPDATE files SET quantity = ? WHERE file_id = ?", (new_qty, file_id))
        conn.commit()
        return True
    except Exception as e:
        print(f"خطا در بروزرسانی تعداد: {str(e)}")
        return False
    finally:
        conn.close()

==================================================
# فایل: keyboards.py
==================================================

from telegram import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)

import database

# کیبورد کاربران
customer_kb = ReplyKeyboardMarkup(
    [
        ["📂 آرشیو", "🔄 درحال انجام"],
        ["💳 کیف پول", "📞 پشتیبانی"],
        ["👥 مدعوین من", "🎁 دریافت لینک دعوت"],
        ["📜 قوانین"]
    ],
    resize_keyboard=True,
    is_persistent=True
)

archive_reply_kb = ReplyKeyboardMarkup(
    [
        ["🕒 هفته اخیر", "📅 ماه اخیر"],
        ["📂 کل آرشیو", "🔙 برگشت"]
    ],
    resize_keyboard=True,
    is_persistent=True
)

# کیبورد ادمین باید دقیقاً همین متن را داشته باشد
admin_kb = ReplyKeyboardMarkup(
    [
        ["🔗 تولید لینک دعوت نامحدود"],  # متن باید دقیقاً همین باشد
        ["👥 لیست مشتریان", "📊 آمار سیستم"]
    ],
    resize_keyboard=True
)

def get_qty_keyboard(current_qty=1):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("-", callback_data="qty_down"),
            InlineKeyboardButton(str(current_qty), callback_data="noop"),
            InlineKeyboardButton("+", callback_data="qty_up")
        ],
        [
            InlineKeyboardButton("تأیید ✅", callback_data="qty_confirm"),
            InlineKeyboardButton("لغو ↩️", callback_data="qty_cancel")
        ]
    ])

# کیبورد کیف پول
wallet_kb = ReplyKeyboardMarkup(
    [
        ["💵 موجودی کیف", "🎫 اعتبار تخفیف"],
        ["🔙 برگشت"]
    ],
    resize_keyboard=True
)
#
def get_customer_kb(user_id):
    active_orders = database.get_active_orders_count(user_id)
    return ReplyKeyboardMarkup(
        [
            ["📂 آرشیو", f"🔄 درحال انجام ({active_orders})"],
            ["💳 کیف پول", "📞 پشتیبانی"],
            ["📜 قوانین", "🧾 فاکتور"],
            ["🎁 دریافت هدیه"]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

==================================================
# فایل: main.py
==================================================

import os
from telegram.ext import CallbackQueryHandler

from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters
)

import database

from handlers.admin_handlers import admin_generate_referral
from handlers.file_handlers import (
    handle_files,
    handle_reply,  # اضافه شده
    handle_callback
)
from handlers.user_handlers import (
    FULL_NAME,
    PHONE,
    cancel_registration,
    get_full_name,
    get_phone,
    handle_active_orders,
    handle_archive,
    show_archive,
    start
)
import logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG  # تغییر به DEBUG برای نمایش تمام لاگ‌ها
)


db_path = "print3d.db"  # اگر مسیرش فرق داره، اصلاح کن

if os.path.exists(db_path):
    os.remove(db_path)
    print("📦 دیتابیس حذف شد.")
else:
    print("ℹ️ دیتابیس وجود نداشت.")



TOKEN = "7943645778:AAEXYzDKUc2D7mWaTcLrSkH4AjlJvVq7PaU"




def main():
    database.create_tables()

    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_full_name)],
            PHONE: [MessageHandler(filters.CONTACT | filters.TEXT & ~filters.COMMAND, get_phone)]
        },
        fallbacks=[CommandHandler("cancel", cancel_registration)],
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Document.ALL, handle_files))
    app.add_handler(MessageHandler(filters.TEXT & filters.REPLY, handle_reply))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.Regex("📂 آرشیو"), show_archive))
    app.add_handler(MessageHandler(filters.Regex("^(🕒 هفته اخیر|📅 ماه اخیر|📂 کل آرشیو)$"),handle_archive))
    app.add_handler(MessageHandler(
        filters.Regex(r"^🔄 درحال انجام(\(\d+\))?$"),  # قبول هر دو فرمت با و بدون عدد
        handle_active_orders
    ))
    # تغییر قسمت اضافه کردن هندلر
    app.add_handler(MessageHandler(filters.Regex("🔗 تولید لینک دعوت نامحدود"), admin_generate_referral))
    app.add_handler(CallbackQueryHandler(handle_callback))  # اضافه کردن هندلر
    app.run_polling()


#
if __name__ == "__main__":
    main()

==================================================
# فایل: handlers\admin_handlers.py
==================================================

from telegram import Update
from telegram.ext import ContextTypes
import database


async def admin_generate_referral(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != database.ADMIN_ID:
        return

    code, error = database.create_referral(user.id, is_admin=True)
    if error:
        await update.message.reply_text(f"❌ {error}")
        return

    bot_username = (await context.bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start=ref_{code}"

    await update.message.reply_text(
        f"🔗 لینک دعوت ادمین:\n{referral_link}\n"
        "⏳ اعتبار: 1 سال\n"
        "👥 تعداد استفاده نامحدود"
    )


async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != database.ADMIN_ID:
        return

    users = database.get_all_users()

    response = "👥 لیست کاربران:\n\n"
    for user in users:
        response += f"🆔 {user[0]} - 📞 {user[2]}\n"

    await update.message.reply_text(response)

==================================================
# فایل: handlers\file_handlers.py
==================================================

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import database
import keyboards
from keyboards import get_qty_keyboard
import logging

logger = logging.getLogger(__name__)

async def handle_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not database.get_user(user.id):
        await update.message.reply_text("❌ لطفاً ابتدا ثبت نام کنید!")
        return

    doc = update.message.document
    file_data = (
        user.id,
        doc.file_name,
        doc.mime_type,
        doc.file_id,
        doc.file_unique_id,
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        1,
        "فاقد توضیحات",
        "در حال انجام",
        ""
    )

    if not database.add_file(file_data):
        await update.message.reply_text("❌ خطا در ذخیره فایل!")
        return

    # کیبورد اصلاح شده
    keyboard = [
        [
            InlineKeyboardButton("تعداد 🧮", callback_data="edit_qty")
        ],
        [
            InlineKeyboardButton("انصراف ❌", callback_data="cancel_file")
        ]
    ]

    await update.message.reply_document(
        document=doc.file_id,
        caption=f"""⏰ زمان تحویل: تعیین نشده
🧮 تعداد: 1
📝 توضیحات: فاقد توضیحات
📌 برای افزودن توضیحات، روی پیام ریپلای کنید""",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    message = query.message

    try:
        logger.debug(f"Callback data received: {data}")

        # لاگ اطلاعات پیام
        logger.debug(f"Message content: {message.to_dict()}")

        # بررسی وجود document در پیام
        if not message.document:
            logger.error("No document found in the message!")
            return

        file_id = message.document.file_id
        logger.info(f"Processing file ID: {file_id}")

        # مدیریت رویدادها
        if data == "edit_qty":
            logger.debug("Edit quantity requested")
            current_qty = database.get_file_quantity(file_id)
            logger.debug(f"Current quantity from DB: {current_qty}")
            # ... بقیه کدها

        elif data in ("qty_up", "qty_down"):
            logger.debug("Quantity change requested")
            # ... بقیه کدها

        elif data == "qty_confirm":
            logger.debug("Quantity confirmation requested")
            # ... بقیه کدها

        # لاگ خطاها
    except Exception as e:
        logger.error(f"Critical error: {str(e)}", exc_info=True)
        await query.answer("⚠️ خطای سیستمی!")


from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import database

async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """مدیریت پاسخ به پیام‌های ریپلای شده"""
    if not update.message.reply_to_message.document:
        return

    user = update.effective_user
    file_id = update.message.reply_to_message.document.file_id
    description = update.message.text.strip()

    # آپدیت توضیحات در دیتابیس
    if database.update_file_description(file_id, description):
        # آپدیت کپشن پیام
        new_caption = f"""
⏰ زمان تحویل: تعیین نشده
🧮 تعداد: {database.get_file_quantity(file_id)}
📝 توضیحات: {description}
        """.strip()

        keyboard = [
            [InlineKeyboardButton("تعداد 🧮", callback_data="edit_qty")],
            [InlineKeyboardButton("انصراف ❌", callback_data="cancel_file")]
        ]

        await update.message.reply_to_message.edit_caption(
            caption=new_caption,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await update.message.reply_text("✅ توضیحات با موفقیت ذخیره شد!")
    else:
        await update.message.reply_text("❌ خطا در ذخیره توضیحات!")


==================================================
# فایل: handlers\user_handlers.py
==================================================

from telegram import Update, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from datetime import datetime
import database
from keyboards import customer_kb, admin_kb, wallet_kb
from jdatetime import datetime as jdatetime

ADMIN_ID = 2138687434
FULL_NAME, PHONE = range(2)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    args = context.args

    if user.id == ADMIN_ID:
        await update.message.reply_text("👑 پنل مدیریتی فعال شد!", reply_markup=admin_kb)
        return ConversationHandler.END

    if database.get_user(user.id):
        await update.message.reply_text("✅ قبلاً ثبت نام کرده‌اید!")
        return ConversationHandler.END

    referral_code = None
    if args and args[0].startswith("ref_"):
        referral_code = args[0][4:]

    if not referral_code:
        await update.message.reply_text("🔒 دسترسی فقط از طریق لینک دعوت ممکن است!")
        return ConversationHandler.END

    context.user_data["referral_code"] = referral_code
    await update.message.reply_text("👤 لطفاً نام کامل خود را وارد کنید:")
    return FULL_NAME


async def get_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["full_name"] = update.message.text
    await update.message.reply_text(
        "📱 لطفاً شماره تماس خود را ارسال کنید:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("ارسال شماره 📲", request_contact=True)]],
            resize_keyboard=True
        )
    )
    return PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        # دریافت اطلاعات تماس
        if update.message.contact:
            phone = update.message.contact.phone_number
        else:
            phone = update.message.text.strip()
            if not phone.startswith('+'):
                phone = f"+98{phone[-10:]}"

        # اعتبارسنجی کد دعوت
        referral_code = context.user_data.get("referral_code")
        valid, inviter_id = database.validate_referral(referral_code)

        if not valid:
            await update.message.reply_text("❌ کد دعوت نامعتبر!")
            return ConversationHandler.END

        # ذخیره کاربر
        user_data = (
            user.id,
            context.user_data["full_name"],
            phone,
            inviter_id,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        )

        if database.add_user(user_data):
            if inviter_id != ADMIN_ID:
                database.add_discount(inviter_id, 50)
                database.decrement_invites(inviter_id)

            await update.message.reply_text("✅ ثبت نام موفق!", reply_markup=customer_kb)
        else:
            await update.message.reply_text("❌ خطا در ثبت اطلاعات!")

    except Exception as e:
        print(f"خطای سیستمی: {str(e)}")
        await update.message.reply_text("❌ خطای سیستمی! لطفاً مجدداً تلاش کنید.")

    return ConversationHandler.END


async def show_archive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "بازه زمانی مورد نظر را انتخاب کنید:",
        reply_markup=archive_reply_kb
    )


async def handle_active_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    active_orders = database.get_active_orders(user.id)

    if not active_orders:
        await update.message.reply_text("✅ هیچ سفارش فعالی ندارید!")
        return

    response = "📋 سفارشات فعال شما:\n\n"
    for order in active_orders:
        response += f"""🔖 شماره سفارش: {order[0]}
📁 فایل: {order[2]}
🧮 تعداد: {order[7]}
⏳ وضعیت: {order[9]}
➖➖➖➖➖➖➖\n"""

    await update.message.reply_text(response)

async def cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """لغو فرایند ثبت نام"""
    await update.message.reply_text(
        "❌ ثبت نام لغو شد.",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END


async def handle_archive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    days = None
    if text == "🕒 هفته اخیر":
        days = 7
    elif text == "📅 ماه اخیر":
        days = 30

    files = database.get_files_by_user(user.id, days)

    if not files:
        await update.message.reply_text(
            "❌ هیچ فایلی در این بازه زمانی یافت نشد!",
            reply_markup=customer_kb
        )
        return

    for file in files:
        miladi_date = datetime.strptime(file[6], "%Y-%m-%d %H:%M:%S")
        shamsi_date = jdatetime.fromgregorian(datetime=miladi_date)

        caption = f"""
📁 نام فایل: {file[2]}
📅 تاریخ ارسال: 
  شمسی: {shamsi_date.strftime("%Y/%m/%d")}
  میلادی: {miladi_date.strftime("%Y/%m/%d")}
🧮 تعداد: {file[7]}
📝 توضیحات: {file[8]}
        """.strip()

        await context.bot.send_document(
            chat_id=user.id,
            document=file[4],
            caption=caption
        )

    await update.message.reply_text(
        "✅ فایل‌های شما ارسال شدند!",
        reply_markup=customer_kb
    )